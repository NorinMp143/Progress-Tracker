{"version":3,"sources":["components/Header.js","components/Login.js","components/Task.js","components/NewTask.js","components/TaskBox.js","components/Home.js","serviceWorker.js","index.js"],"names":["Header","name","logout","style","height","backgroundColor","flex","justifyContent","alignItems","textAlign","Button","variant","float","onClick","Login","onLoginSucess","useState","setName","mail","setMail","password","setPassword","margin","display","width","minWidth","padding","htmlFor","id","value","onChange","e","target","type","userFoundFlag","Database","users","map","item","toLowerCase","alert","position","top","left","Task","taskName","projectName","formattedTime","onDelete","remainingTime","setRemainingTime","useEffect","ftime","timeArray","split","parseInt","getFormattedTimeInSec","timerRef","setTimeout","err","console","log","clearTimeout","fontSize","marginRight","marginTop","fontWeight","NewTask","onClose","onSubmit","setTaskName","setFormattedTime","projectsList","setProjectName","options","obj","TaskBox","profileInfo","taskList","setTaskList","isNewTaskOpen","setNewTaskOpen","onDeleteAction","data","filter","key","push","Home","isLogin","setIsLogin","setProfileInfo","profileInfoData","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b7f8df57.chunk.js","sourcesContent":["import React from 'react';\nimport Button from 'react-bootstrap/Button';\n\nconst Header = ({ name, logout }) => {\n    return (\n        <div style={{ height: 60, backgroundColor: 'rgb(253,194,48)', flex: 1, justifyContent: 'row', alignItems: 'flex-end', textAlign: 'center' }}>\n            <Button variant=\"warning\" style={{ float: \"left\" ,height: 60}}>Hi {name}</Button>{' '}\n            <Button variant=\"warning\" style={{ float: \"right\",height: 60 }} onClick={logout} >Logout</Button>{' '}\n        </div>\n    );\n}\n\nexport default Header;\n","import React, { useState, useEffect } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Home from './Home';\nimport Database from '../data.json';\n\nconst Login = ({ onLoginSucess }) => {\n\n    const [name, setName] = useState('test1');\n    const [mail, setMail] = useState('test1@gmail.com');\n    const [password, setPassword] = useState('pass1');\n\n    const onLogin = () => {\n        if (name && mail && password) {\n            let userFoundFlag = false;\n            Database.users.map(item => {\n                if (name.toLowerCase() === item.name && mail.toLowerCase() === item.mail && password === item.password) {\n                    userFoundFlag = true;\n                }\n            });\n            if (userFoundFlag) {\n                onLoginSucess({ name, mail });\n            } else {\n                alert('Incorrect user credentials');\n            }\n\n        }\n        else {\n            alert('All fields are required');\n        }\n    }\n\n    return (\n        <div style={{ margin: 20 }}>\n            <div style={{ display: 'flex', flex: 1, justifyContent: 'center' }}>\n                <div style={{ width: '50%', minWidth: 400 }}>\n                    <h2 style={{ textAlign: \"center\", margin: 20 }}>Progress Tracker Login</h2>\n                    <div style={{ backgroundColor: 'lightgrey', flex: 1, justifyContent: 'row', alignItems: 'flex-end', textAlign: 'center', padding: 20 }}>\n                        {/* Name */}\n                        <label htmlFor=\"name\">\n                            Enter Name:\n                </label>\n                        <br />\n                        <input\n                            id=\"name\"\n                            value={name}\n                            onChange={e => setName(e.target.value)}\n                        />\n                        <br />\n                        <br />\n\n                        {/* Mail*/}\n                        <label htmlFor=\"mail\">\n                            Enter Mail:\n                </label>\n                        <br />\n                        <input type=\"email\"\n                            id=\"mail\"\n                            value={mail}\n                            onChange={e => setMail(e.target.value)}\n                        />\n                        <br />\n                        <br />\n\n                        {/* Password */}\n                        <label htmlFor=\"password\">\n                            Enter Password:\n                </label>\n                        <br />\n                        <input type=\"password\"\n                            id=\"password\"\n                            value={password}\n                            onChange={e => setPassword(e.target.value)}\n                        />\n                        <br />\n                        <br />\n                        <Button variant=\"success\"\n                            onClick={onLogin}\n                            style={{ position: 'relative', top: '50%', left: '45%' }}>\n                            Login\n            </Button>{' '}\n                    </div>\n\n                </div>\n            </div>\n        </div>\n\n\n\n    );\n}\n\nexport default Login;\n","import React, { useState, useEffect } from 'react';\n\nimport Button from 'react-bootstrap/Button';\n\nconst Task = ({ taskName, projectName, formattedTime, onDelete }) => {\n\n    const [remainingTime, setRemainingTime] = useState(0);\n\n    const deleteAction = () => {\n        onDelete(taskName);\n    }\n\n    const getFormattedTimeInSec = (ftime) => {\n        const timeArray = ftime.split(\":\");\n        return parseInt(timeArray[0] * 60 * 60) + parseInt(timeArray[1] * 60)\n    };\n\n    useEffect(() => {\n        setRemainingTime(getFormattedTimeInSec(formattedTime));\n        return () => {\n            setRemainingTime(0);\n        }\n    }, [])\n\n    useEffect(() => {\n        let timerRef;\n        try {\n            if (remainingTime) {\n                timerRef = setTimeout(() =>  setRemainingTime(remainingTime - 1), 1000);\n            }\n        } catch (err) {\n            console.log(\"err: \", err)\n        }\n        return () => {\n            clearTimeout(timerRef);\n        }\n    }, [remainingTime])\n\n    return (\n        <div style={{ backgroundColor: 'lightgrey', margin: 5, padding: 5 }}>\n            <div>\n                <span style={{ fontSize: 18, flex: 1 }}>{taskName}</span>\n                <div style={{ float: 'right' }}>\n                    <span style={{ fontSize: 22, marginRight: 30 }}>{remainingTime}</span>\n                    <Button variant=\"danger\" style={{ fontSize: 10 }} onClick={deleteAction}>X</Button>{' '}\n                </div>\n            </div>\n            <div style={{ marginTop: 5 }}>\n                <span style={{ fontSize: 14, fontWeight: 'bold' }}>{projectName}</span>\n                <span style={{ fontSize: 14 }}>{` (Total time in [hh:mm] is ${formattedTime})`}</span>\n            </div>\n        </div>\n    );\n}\n\nexport default Task;\n","import React, { useState, useEffect } from 'react';\nimport Header from './Header';\nimport Task from './Task';\nimport Database from '../data.json';\nimport Dropdown from 'react-dropdown';\nimport 'react-dropdown/style.css';\nimport Button from 'react-bootstrap/Button';\nimport Timekeeper from 'react-timekeeper';\n\nconst NewTask = ({ onClose, onSubmit }) => {\n\n    const [taskName, setTaskName] = useState();\n    const [formattedTime, setFormattedTime] = useState('05:40');\n    const [projectName, setProjectName] = useState(Database.projectsList[0]);\n\n    const onCreateNewTask = () => {\n        if (taskName && projectName && formattedTime) {\n            onSubmit(taskName, projectName, formattedTime);\n        }\n        else {\n            alert('All fields are required');\n        }\n\n    };\n    const onSelect = (obj) => {\n        setProjectName(obj.value)\n    }\n\n    return (\n        <div>\n            <h2 style={{ textAlign: \"center\", margin: 10 }}>Create New Task</h2>\n            <div style={{ display: 'flex', flex: 1, justifyContent: 'center' }}>\n\n                <div style={{ width: '50%', minWidth: 400, backgroundColor: 'lightgrey', padding: 20 }}>\n                    {/* Task Name */}\n                    <label htmlFor=\"taskNameInput\">\n                        Name of the task:\n                </label>\n                    <br />\n                    <input\n                        id=\"taskNameInput\"\n                        onChange={e => setTaskName(e.target.value)}\n                        value={taskName}\n                    />\n                    <br />\n                    <br />\n\n\n                    {/* Project Name */}\n                    <label htmlFor=\"projectName\">Select Project Name:</label>\n                    <Dropdown options={Database.projectsList} onChange={onSelect} value={projectName} />\n                    <br />\n                    \n\n                    {/* Formatted Time */}\n                    <label htmlFor=\"formattedTime\">\n                        Enter Time needed (hh:mm):\n                </label>\n                    <br />\n                    <input\n                        id=\"formattedTime\"\n                        onChange={e => setFormattedTime(e.target.value)}\n                        value={formattedTime}\n                    />\n                    <br />\n                    \n                    <br />\n                    <Button variant=\"success\" onClick={onCreateNewTask} style={{\n                        position: 'relative', top: '50%', left: '30%', margin: 10\n                    }}>Submit</Button>\n                    <Button variant=\"danger\" onClick={onClose} style={{\n                        position: 'relative', top: '50%', left: '30%'\n                    }} >Close</Button>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default NewTask;\n","import React, { useState } from 'react';\nimport Header from './Header';\nimport Task from './Task';\nimport NewTask from './NewTask';\nimport Button from 'react-bootstrap/Button';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Database from '../data.json';\n\nconst TaskBox = ({logout, profileInfo}) => {\n    const [taskList, setTaskList] = useState(Database.taskList);\n    const [isNewTaskOpen, setNewTaskOpen] = useState(false);\n\n    const onCreateNewTask = (taskName, projectName, formattedTime) => {\n        const data = taskList;\n        data.push({\n            \"taskName\": taskName,\n            \"projectName\": projectName,\n            \"formattedTime\": formattedTime\n        });\n        setTaskList(data);\n        setNewTaskOpen(false);\n    };\n\n    const onDeleteAction = (taskName) => {\n        const data = taskList.filter(item => {\n            return item.taskName !== taskName;\n        });\n        setTaskList(data);\n    }\n\n    const onLogout = () => {\n        setTaskList([]);\n        logout()\n    }\n\n    return (\n        <div >\n            {/* Header */}\n            <Header name={profileInfo.name} logout={onLogout} />\n\n            {/* Task List */}\n            {!isNewTaskOpen && (\n                <div style={{margin:20}}>\n                    <div style={{ display: 'flex', flex: 1, justifyContent: 'center' }}>\n                        <div style={{ width: '50%', minWidth: 400 }}>\n                        <h2 style={{textAlign:\"center\", margin: 20}}>Progress Tracker</h2>\n                            {\n                                taskList.map(item => (\n                                    <Task\n                                        key={item.taskName}\n                                        taskName={item.taskName}\n                                        projectName={item.projectName}\n                                        formattedTime={item.formattedTime}\n                                        onDelete={onDeleteAction}\n                                    />\n                                ))\n                            }\n\n                        </div>\n                    </div>\n                    <Button variant=\"success\" onClick={() => { setNewTaskOpen(true) }} style={{\n                      position:'relative', top:'50%', left:'45%'\n                    }}>Create New Task</Button>{' '}\n                </div>\n            )}\n\n            {/* Create New Task */}\n            {isNewTaskOpen && (\n                <NewTask\n                    onClose={() => { setNewTaskOpen(false) }}\n                    onSubmit={onCreateNewTask}\n                />\n            )}\n        </div>\n    );\n}\n\nexport default TaskBox;\n","import React, { useState, useEffect } from 'react';\nimport Header from './Header';\nimport Login from './Login';\nimport TaskBox from './TaskBox';\nimport Button from 'react-bootstrap/Button';\n\nconst Home = () => {\n    const [isLogin, setIsLogin] = useState(false);\n    const [profileInfo, setProfileInfo] = useState();\n\n    const onLoginSucess = (profileInfoData) => {\n        setProfileInfo(profileInfoData)\n        setIsLogin(true)\n    };\n\n    return (\n        <div >\n            {/* Login */}\n            {!isLogin && (\n                <Login onLoginSucess={onLoginSucess} />\n            )}\n\n            {isLogin && (\n                <TaskBox logout={() => setIsLogin(false)} profileInfo={profileInfo} />\n            )}\n\n        </div>\n    );\n}\n\nexport default Home;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Home from './components/Home';\n// import App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Home />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}